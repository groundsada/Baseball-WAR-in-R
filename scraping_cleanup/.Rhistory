# Save the cleaned data
data_removed
data
print_non_alphanumeric_names(data)
data <- clean_player_names(data)
print_non_alphanumeric_names(data)
nrow(data)
write.csv(data, "dataset/data2.csv", row.names = FALSE)
library(dplyr)
# Load the datasets
data1 <- read.csv("dataset/data1.csv", stringsAsFactors = FALSE)
data2 <- read.csv("dataset/data2.csv", stringsAsFactors = FALSE)
# Add an identifier column to each dataset
data1 <- dplyr::mutate(data1, source = "data1")
data2 <- dplyr::mutate(data2, source = "data2")
# Perform a full join on 'Name', 'Season', and 'Team'
full_join_result <- dplyr::full_join(data1, data2, by = c("Name", "Season", "Team"))
# Find rows in data1 that don't have a match in data2
unmatched_data1 <- full_join_result %>%
dplyr::filter(is.na(source.y)) %>%
dplyr::select(names(data1)[names(data1) %in% names(full_join_result)])  # Safely select matching columns
# Find rows in data2 that don't have a match in data1
unmatched_data2 <- full_join_result %>%
dplyr::filter(is.na(source.x)) %>%
dplyr::select(names(data2)[names(data2) %in% names(full_join_result)])  # Safely select matching columns
# Print the unmatched rows
print("Rows in Data1 that don't have a match in Data2:")
print(unmatched_data1)
print("Rows in Data2 that don't have a match in Data1:")
print(unmatched_data2)
# Load the datasets
data1 <- read.csv("dataset/data1.csv", stringsAsFactors = FALSE)
data2 <- read.csv("dataset/data2.csv", stringsAsFactors = FALSE)
# Clean 'Name' column in data2 by removing trailing "HOF"
data2$Name <- str_trim(stringr::str_replace(data2$Name, "\\s+HOF$", ""))
# Add an identifier column to each dataset
data1 <- mutate(data1, source = "data1")
data2 <- mutate(data2, source = "data2")
# Perform a full join on 'Name', 'Season', and 'Team'
full_join_result <- full_join(data1, data2, by = c("Name", "Season", "Team"))
# Find rows in data1 that don't have a match in data2
unmatched_data1 <- full_join_result %>%
filter(is.na(source.y)) %>%
select(names(data1)[names(data1) %in% names(full_join_result)])  # Safely select matching columns
# Find rows in data2 that don't have a match in data1
unmatched_data2 <- full_join_result %>%
filter(is.na(source.x)) %>%
select(names(data2)[names(data2) %in% names(full_join_result)])  # Safely select matching columns
print("Rows in Data1 that don't have a match in Data2:")
print(unmatched_data1)
print("Rows in Data2 that don't have a match in Data1:")
print(unmatched_data2)
# Print some sample unmatched rows with 'Jr' in their names
print(unmatched_data1[grepl("Jr", unmatched_data1$Name), ])
print(unmatched_data2[grepl("Jr", unmatched_data2$Name), ])
# Function to normalize names
normalize_name <- function(name) {
name <- stringr::str_trim(name)  # Trim whitespace
name <- gsub("\\s+", " ", name)  # Replace multiple spaces with a single space
name <- tolower(name)  # Convert to lower case
name <- gsub("\\bjr\\.?$", "jr", name, perl = TRUE)  # Normalize "Jr" suffix
return(name)
}
# Apply normalization to both datasets
data1$Name <- sapply(data1$Name, normalize_name)
data2$Name <- sapply(data2$Name, normalize_name)
# Then perform the full join and filtering as before
full_join_result <- full_join(data1, data2, by = c("Name", "Season", "Team"))
# Filter unmatched rows after normalization
unmatched_data1 <- full_join_result %>%
filter(is.na(source.y)) %>%
select(names(data1)[names(data1) %in% names(full_join_result)])
unmatched_data2 <- full_join_result %>%
filter(is.na(source.x)) %>%
select(names(data2)[names(data2) %in% names(full_join_result)])
print("Rows in Data1 that don't have a match in Data2:")
print(unmatched_data1)
print("Rows in Data2 that don't have a match in Data1:")
print(unmatched_data2)
head(full_join_result)
summary(full_join_result)
nrow(full_join_result)
# Save the cleaned data
write.csv(data, "dataset/merged_data.csv", row.names = FALSE)
library(dplyr)
library(stringr)
library(stringi)
# Read the data
data <- read.csv("dataset/data1.csv", stringsAsFactors = FALSE)
nrow(data)
head(data)
data_removed <- data[is.na(data$Pos) | data$Pos == "" | data$Pos == "Pos", ]
# Filter out these rows from the main dataframe
data <- data[!is.na(data$Pos) & data$Pos != "" & data$Pos != "Pos", ]
# Clean up player names by removing trailing asterisks
data$Name <- gsub("\\*$", "", data$Name)
# Correct specific misencoded characters manually
data$Name <- gsub("√©", "é", data$Name)
data$Name <- gsub("√≥", "ó", data$Name)
data$Name <- gsub("√±", "ñ", data$Name)
# Try using stringi to convert encodings if manual fixes are incomplete
data$Name <- stri_trans_general(data$Name, "Latin-ASCII")
# Save the cleaned data
data_removed
nrow(data)
head(data)
# check names
print_non_alphanumeric_names <- function(data) {
# Check if the Name column contains non-alphanumeric or non-space characters
non_alphanumeric_players <- data %>%
filter(!grepl("^[a-zA-Z0-9 ]+$", Name)) %>%
select(Name)
# Print the results
if (nrow(non_alphanumeric_players) > 0) {
print(non_alphanumeric_players)
} else {
print("No players with non-alphanumeric or space characters in their names.")
}
}
print_non_alphanumeric_names(data)
clean_player_names <- function(data) {
# Remove all non-alphanumeric characters except spaces, and trailing hashes
data$Name <- str_replace_all(data$Name, "#$", "")
data$Name <- str_replace_all(data$Name, "[^a-zA-Z0-9 ]", " ")
return(data)
}
data <- clean_player_names(data)
print_non_alphanumeric_names(data)
# Save the cleaned data
write.csv(data, "dataset/data1.csv", row.names = FALSE)
data <- read.csv("dataset/data2.csv", stringsAsFactors = FALSE)
head(data)
nrow(data)
data_removed <- data[is.na(data$Age) | data$Age == "" | data$Age == "Age", ]
# Filter out these rows from the main dataframe
data <- data[!is.na(data$Age) & data$Age != "" & data$Age != "Age", ]
# Clean up player names by removing trailing asterisks
data$Name <- gsub("\\*$", "", data$Name)
# Correct specific misencoded characters manually
data$Name <- gsub("√©", "é", data$Name)
data$Name <- gsub("√≥", "ó", data$Name)
data$Name <- gsub("√±", "ñ", data$Name)
# Try using stringi to convert encodings if manual fixes are incomplete
data$Name <- stri_trans_general(data$Name, "Latin-ASCII")
# Save the cleaned data
data_removed
data
print_non_alphanumeric_names(data)
data <- clean_player_names(data)
print_non_alphanumeric_names(data)
nrow(data)
write.csv(data, "dataset/data2.csv", row.names = FALSE)
library(dplyr)
# Load the datasets
data1 <- read.csv("dataset/data1.csv", stringsAsFactors = FALSE)
data2 <- read.csv("dataset/data2.csv", stringsAsFactors = FALSE)
# Add an identifier column to each dataset
data1 <- dplyr::mutate(data1, source = "data1")
data2 <- dplyr::mutate(data2, source = "data2")
# Perform a full join on 'Name', 'Season', and 'Team'
full_join_result <- dplyr::full_join(data1, data2, by = c("Name", "Season", "Team"))
# Find rows in data1 that don't have a match in data2
unmatched_data1 <- full_join_result %>%
dplyr::filter(is.na(source.y)) %>%
dplyr::select(names(data1)[names(data1) %in% names(full_join_result)])  # Safely select matching columns
# Find rows in data2 that don't have a match in data1
unmatched_data2 <- full_join_result %>%
dplyr::filter(is.na(source.x)) %>%
dplyr::select(names(data2)[names(data2) %in% names(full_join_result)])  # Safely select matching columns
# Print the unmatched rows
print("Rows in Data1 that don't have a match in Data2:")
print(unmatched_data1)
print("Rows in Data2 that don't have a match in Data1:")
print(unmatched_data2)
# Load the datasets
data1 <- read.csv("dataset/data1.csv", stringsAsFactors = FALSE)
data2 <- read.csv("dataset/data2.csv", stringsAsFactors = FALSE)
# Clean 'Name' column in data2 by removing trailing "HOF"
data2$Name <- str_trim(stringr::str_replace(data2$Name, "\\s+HOF$", ""))
# Add an identifier column to each dataset
data1 <- mutate(data1, source = "data1")
data2 <- mutate(data2, source = "data2")
# Perform a full join on 'Name', 'Season', and 'Team'
full_join_result <- full_join(data1, data2, by = c("Name", "Season", "Team"))
# Find rows in data1 that don't have a match in data2
unmatched_data1 <- full_join_result %>%
filter(is.na(source.y)) %>%
select(names(data1)[names(data1) %in% names(full_join_result)])  # Safely select matching columns
# Find rows in data2 that don't have a match in data1
unmatched_data2 <- full_join_result %>%
filter(is.na(source.x)) %>%
select(names(data2)[names(data2) %in% names(full_join_result)])  # Safely select matching columns
print("Rows in Data1 that don't have a match in Data2:")
print(unmatched_data1)
print("Rows in Data2 that don't have a match in Data1:")
print(unmatched_data2)
# Print some sample unmatched rows with 'Jr' in their names
print(unmatched_data1[grepl("Jr", unmatched_data1$Name), ])
print(unmatched_data2[grepl("Jr", unmatched_data2$Name), ])
# Function to normalize names
normalize_name <- function(name) {
name <- stringr::str_trim(name)  # Trim whitespace
name <- gsub("\\s+", " ", name)  # Replace multiple spaces with a single space
name <- tolower(name)  # Convert to lower case
name <- gsub("\\bjr\\.?$", "jr", name, perl = TRUE)  # Normalize "Jr" suffix
return(name)
}
# Apply normalization to both datasets
data1$Name <- sapply(data1$Name, normalize_name)
data2$Name <- sapply(data2$Name, normalize_name)
# Then perform the full join and filtering as before
full_join_result <- full_join(data1, data2, by = c("Name", "Season", "Team"))
# Filter unmatched rows after normalization
unmatched_data1 <- full_join_result %>%
filter(is.na(source.y)) %>%
select(names(data1)[names(data1) %in% names(full_join_result)])
unmatched_data2 <- full_join_result %>%
filter(is.na(source.x)) %>%
select(names(data2)[names(data2) %in% names(full_join_result)])
print("Rows in Data1 that don't have a match in Data2:")
print(unmatched_data1)
print("Rows in Data2 that don't have a match in Data1:")
print(unmatched_data2)
head(full_join_result)
summary(full_join_result)
nrow(full_join_result)
# Save the cleaned data
write.csv(full_join_results, "dataset/merged_data.csv", row.names = FALSE)
# Save the cleaned data
write.csv(full_join_result, "dataset/merged_data.csv", row.names = FALSE)
library(dplyr)
# Read the datasets
merged_data <- read.csv("dataset/merged_data.csv", fileEncoding = "UTF-8")
rank_data <- read.csv("dataset/rank.csv", fileEncoding = "UTF-8")
head(merged_data)
merged_data$Name <- tolower(merged_data$Name)
# Replace all non-alphabetic characters with spaces
merged_data$Name <- gsub("[^a-z ]", " ", merged_data$Name)
# Remove trailing "hof" from player names
merged_data$Name <- gsub("hof\\s*$", "", merged_data$Name)
# Remove leading and trailing whitespaces
merged_data$Name <- gsub("^\\s+|\\s+$", "", merged_data$Name)
rank_data$Player <- tolower(rank_data$Player)
rank_data$Player <- gsub("[^a-z ]", " ", rank_data$Player)
rank_data$Player <- gsub("\\s+$", "", rank_data$Player)
rank_data$Player <- gsub("^\\s+", "", rank_data$Player)
rank_data$Team[rank_data$Team == "LA"] <- "LAD"
rank_data$Team[rank_data$Team == "SF"] <- "SFG"
rank_data$Team[rank_data$Team == "SD"] <- "SDP"
rank_data$Team[rank_data$Team == "KC"] <- "KCR"
rank_data$Team[rank_data$Team == "CWS"] <- "CHW"
rank_data$Team[rank_data$Team == "TB"] <- "TBR"
rank_data$Team[rank_data$Team == "NY"] <- "NYY" # Example for New York Yankees, if needed
rank_data$Team[rank_data$Team == "CHI"] <- "CHC" # Example for Chicago Cubs, if needed
rank_data$Team[rank_data$Team == "FLA"] <- "MIA"
rank_data$Team[rank_data$Team == "WSH"] <- "WAS"
standard_teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CIN", "CLE", "COL", "CWS", "DET", "HOU", "KC", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SD", "SEA", "SF", "STL", "TB", "TEX", "TOR", "WAS")
# Extract unique team names from rank_data
unique_teams <- unique(rank_data$Team)
# Identify which of these are not in the standard list
unique_teams[!unique_teams %in% standard_teams]
colnames(merged_data)[colnames(merged_data) == "Name"] <- "Player"
colnames(merged_data)[colnames(merged_data) == "Season"] <- "Year"
colnames(merged_data)[colnames(merged_data) == "Team"] <- "Team"
check_match <- left_join(rank_data, merged_data, by = c("Player", "Team", "Year"))
unmatched_rows <- check_match[is.na(check_match$Age), ]
print(unmatched_rows)
# fixes:
rank_data$Team[rank_data$Team == "WSH"] <- "WSN"
rank_data$Team[rank_data$Team == "WAS"] <- "WSN"
rank_data$Player <- gsub("carlos ivan beltran", "carlos beltran", rank_data$Player)
rank_data$Player <- gsub("adam a lind", "adam lind", rank_data$Player)
rank_data$Player <- gsub("carl demonte crawford", "carl crawford", rank_data$Player)
rank_data$Player <- gsub("hong chih kuo", "hung chih kuo", rank_data$Player)
rank_data$Player <- gsub("mike anthony napoli", "mike napoli", rank_data$Player)
rank_data$Player <- gsub("michael morse", "mike morse", rank_data$Player)
rank_data$Player <- gsub("henderson alvarez", "henderson alvarez iii", rank_data$Player)
rank_data[rank_data$Player == "johnny damon" & rank_data$Year == 2009, "Team"] <- "NYY"
# Change team to 'STL' for Joel Pineiro in 2009
rank_data[rank_data$Player == "joel pineiro" & rank_data$Year == 2009, "Team"] <- "STL"
# Change team to 'LAD' for Randy Wolf in 2009
rank_data[rank_data$Player == "randy wolf" & rank_data$Year == 2009, "Team"] <- "LAD"
# Change team to 'HOU' for Miguel Tejada in 2009
rank_data[rank_data$Player == "miguel tejada" & rank_data$Year == 2009, "Team"] <- "HOU"
# Change team to 'TOR' for Marco Scutaro in 2009
rank_data[rank_data$Player == "marco scutaro" & rank_data$Year == 2009, "Team"] <- "TOR"
# Change team to 'DET' for Edwin Jackson in 2009
rank_data[rank_data$Player == "edwin jackson" & rank_data$Year == 2009, "Team"] <- "DET"
# Change team to 'DET' for Curtis Granderson in 2009
rank_data[rank_data$Player == "curtis granderson" & rank_data$Year == 2009, "Team"] <- "DET"
# Change team to 'DET' for Fernando Rodney in 2009
rank_data[rank_data$Player == "fernando rodney" & rank_data$Year == 2009, "Team"] <- "DET"
check_match <- left_join(rank_data, merged_data, by = c("Player", "Team", "Year"))
unmatched_rows <- check_match[is.na(check_match$Age), ]
print(unmatched_rows)
merged_data <- merge(merged_data, rank_data[, c("Player", "Team", "Year", "Rank")],
by = c("Player", "Team", "Year"), all.x = TRUE)
# Renaming the 'Rank' column to 'top_100' and replacing NA with "No"
merged_data$top_100 <- ifelse(is.na(merged_data$Rank), "No", merged_data$Rank)
# Drop the original 'Rank' column if no longer needed
merged_data$Rank <- NULL
# Print the updated merged_data to check
print(head(merged_data))
# Print the total number of rows in merged_data
total_rows <- nrow(merged_data)
print(paste("Total number of rows in merged_data:", total_rows))
rank_1_to_100 <- sum(merged_data$numeric_rank >= 1 & merged_data$numeric_rank <= 100, na.rm = TRUE)
print(paste("Number of rows with rank between 1 and 100:", rank_1_to_100))
# Count and print the number of rows with rank 'No'
rank_no <- sum(merged_data$top_100 == "No", na.rm = TRUE)
print(paste("Number of rows with rank 'No':", rank_no))
# Count and print the number of rows with any different rank (if applicable)
# This assumes there might be other unexpected rank values
different_rank <- sum(!merged_data$top_100 %in% c(1:100, "No"), na.rm = TRUE)
print(paste("Number of rows with different or unexpected rank:", different_rank))
library(dplyr)
# Read the datasets
merged_data <- read.csv("dataset/merged_data.csv", fileEncoding = "UTF-8")
rank_data <- read.csv("dataset/rank.csv", fileEncoding = "UTF-8")
head(merged_data)
merged_data$Name <- tolower(merged_data$Name)
# Replace all non-alphabetic characters with spaces
merged_data$Name <- gsub("[^a-z ]", " ", merged_data$Name)
# Remove trailing "hof" from player names
merged_data$Name <- gsub("hof\\s*$", "", merged_data$Name)
# Remove leading and trailing whitespaces
merged_data$Name <- gsub("^\\s+|\\s+$", "", merged_data$Name)
rank_data$Player <- tolower(rank_data$Player)
rank_data$Player <- gsub("[^a-z ]", " ", rank_data$Player)
rank_data$Player <- gsub("\\s+$", "", rank_data$Player)
rank_data$Player <- gsub("^\\s+", "", rank_data$Player)
rank_data$Team[rank_data$Team == "LA"] <- "LAD"
rank_data$Team[rank_data$Team == "SF"] <- "SFG"
rank_data$Team[rank_data$Team == "SD"] <- "SDP"
rank_data$Team[rank_data$Team == "KC"] <- "KCR"
rank_data$Team[rank_data$Team == "CWS"] <- "CHW"
rank_data$Team[rank_data$Team == "TB"] <- "TBR"
rank_data$Team[rank_data$Team == "NY"] <- "NYY" # Example for New York Yankees, if needed
rank_data$Team[rank_data$Team == "CHI"] <- "CHC" # Example for Chicago Cubs, if needed
rank_data$Team[rank_data$Team == "FLA"] <- "MIA"
rank_data$Team[rank_data$Team == "WSH"] <- "WAS"
standard_teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CIN", "CLE", "COL", "CWS", "DET", "HOU", "KC", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SD", "SEA", "SF", "STL", "TB", "TEX", "TOR", "WAS")
# Extract unique team names from rank_data
unique_teams <- unique(rank_data$Team)
# Identify which of these are not in the standard list
unique_teams[!unique_teams %in% standard_teams]
colnames(merged_data)[colnames(merged_data) == "Name"] <- "Player"
colnames(merged_data)[colnames(merged_data) == "Season"] <- "Year"
colnames(merged_data)[colnames(merged_data) == "Team"] <- "Team"
check_match <- left_join(rank_data, merged_data, by = c("Player", "Team", "Year"))
unmatched_rows <- check_match[is.na(check_match$Age), ]
print(unmatched_rows)
# fixes:
rank_data$Team[rank_data$Team == "WSH"] <- "WSN"
rank_data$Team[rank_data$Team == "WAS"] <- "WSN"
rank_data$Player <- gsub("carlos ivan beltran", "carlos beltran", rank_data$Player)
rank_data$Player <- gsub("adam a lind", "adam lind", rank_data$Player)
rank_data$Player <- gsub("carl demonte crawford", "carl crawford", rank_data$Player)
rank_data$Player <- gsub("hong chih kuo", "hung chih kuo", rank_data$Player)
rank_data$Player <- gsub("mike anthony napoli", "mike napoli", rank_data$Player)
rank_data$Player <- gsub("michael morse", "mike morse", rank_data$Player)
rank_data$Player <- gsub("henderson alvarez", "henderson alvarez iii", rank_data$Player)
rank_data[rank_data$Player == "johnny damon" & rank_data$Year == 2009, "Team"] <- "NYY"
# Change team to 'STL' for Joel Pineiro in 2009
rank_data[rank_data$Player == "joel pineiro" & rank_data$Year == 2009, "Team"] <- "STL"
# Change team to 'LAD' for Randy Wolf in 2009
rank_data[rank_data$Player == "randy wolf" & rank_data$Year == 2009, "Team"] <- "LAD"
# Change team to 'HOU' for Miguel Tejada in 2009
rank_data[rank_data$Player == "miguel tejada" & rank_data$Year == 2009, "Team"] <- "HOU"
# Change team to 'TOR' for Marco Scutaro in 2009
rank_data[rank_data$Player == "marco scutaro" & rank_data$Year == 2009, "Team"] <- "TOR"
# Change team to 'DET' for Edwin Jackson in 2009
rank_data[rank_data$Player == "edwin jackson" & rank_data$Year == 2009, "Team"] <- "DET"
# Change team to 'DET' for Curtis Granderson in 2009
rank_data[rank_data$Player == "curtis granderson" & rank_data$Year == 2009, "Team"] <- "DET"
# Change team to 'DET' for Fernando Rodney in 2009
rank_data[rank_data$Player == "fernando rodney" & rank_data$Year == 2009, "Team"] <- "DET"
check_match <- left_join(rank_data, merged_data, by = c("Player", "Team", "Year"))
unmatched_rows <- check_match[is.na(check_match$Age), ]
print(unmatched_rows)
merged_data <- merge(merged_data, rank_data[, c("Player", "Team", "Year", "Rank")],
by = c("Player", "Team", "Year"), all.x = TRUE)
# Renaming the 'Rank' column to 'top_100' and replacing NA with "No"
merged_data$top_100 <- ifelse(is.na(merged_data$Rank), "No", merged_data$Rank)
# Drop the original 'Rank' column if no longer needed
merged_data$Rank <- NULL
# Print the updated merged_data to check
print(head(merged_data))
# Print the total number of rows in merged_data
total_rows <- nrow(merged_data)
print(paste("Total number of rows in merged_data:", total_rows))
rank_1_to_100 <- sum(merged_data$numeric_rank >= 1 & merged_data$numeric_rank <= 100, na.rm = TRUE)
print(paste("Number of rows with rank between 1 and 100:", rank_1_to_100))
# Count and print the number of rows with rank 'No'
rank_no <- sum(merged_data$top_100 == "No", na.rm = TRUE)
print(paste("Number of rows with rank 'No':", rank_no))
# Count and print the number of rows with any different rank (if applicable)
# This assumes there might be other unexpected rank values
different_rank <- sum(!merged_data$top_100 %in% c(1:100, "No"), na.rm = TRUE)
print(paste("Number of rows with different or unexpected rank:", different_rank))
# Print the total number of rows in merged_data
total_rows <- nrow(merged_data)
print(paste("Total number of rows in merged_data:", total_rows))
rank_1_to_100 <- sum(as.numeric(as.character(merged_data$top_100)) >= 1 &
as.numeric(as.character(merged_data$top_100)) <= 100, na.rm = TRUE)
print(paste("Number of rows with rank between 1 and 100:", rank_1_to_100))
# Count and print the number of rows with rank 'No'
rank_no <- sum(merged_data$top_100 == "No", na.rm = TRUE)
print(paste("Number of rows with rank 'No':", rank_no))
# Count and print the number of rows with any different rank (if applicable)
# This assumes there might be other unexpected rank values
different_rank <- sum(!merged_data$top_100 %in% c(1:100, "No"), na.rm = TRUE)
print(paste("Number of rows with different or unexpected rank:", different_rank))
# Print the total number of rows in merged_data
total_rows <- nrow(merged_data)
print(paste("Total number of rows in merged_data:", total_rows))
rank_1_to_100 <- sum(as.numeric(as.character(merged_data$top_100)) >= 1 &
as.numeric(as.character(merged_data$top_100)) <= 100, na.rm = TRUE)
print(paste("Number of rows with rank between 1 and 100:", rank_1_to_100))
# Count and print the number of rows with rank 'No'
rank_no <- sum(merged_data$top_100 == "No", na.rm = TRUE)
print(paste("Number of rows with rank 'No':", rank_no))
# Count and print the number of rows with any different rank (if applicable)
# This assumes there might be other unexpected rank values
different_rank <- sum(!merged_data$top_100 %in% c(1:100, "No"), na.rm = TRUE)
print(paste("Number of rows with different or unexpected rank:", different_rank))
library(dplyr)
# Read the datasets
merged_data <- read.csv("dataset/merged_data.csv", fileEncoding = "UTF-8")
rank_data <- read.csv("dataset/rank.csv", fileEncoding = "UTF-8")
head(merged_data)
merged_data$Name <- tolower(merged_data$Name)
# Replace all non-alphabetic characters with spaces
merged_data$Name <- gsub("[^a-z ]", " ", merged_data$Name)
# Remove trailing "hof" from player names
merged_data$Name <- gsub("hof\\s*$", "", merged_data$Name)
# Remove leading and trailing whitespaces
merged_data$Name <- gsub("^\\s+|\\s+$", "", merged_data$Name)
rank_data$Player <- tolower(rank_data$Player)
rank_data$Player <- gsub("[^a-z ]", " ", rank_data$Player)
rank_data$Player <- gsub("\\s+$", "", rank_data$Player)
rank_data$Player <- gsub("^\\s+", "", rank_data$Player)
rank_data$Team[rank_data$Team == "LA"] <- "LAD"
rank_data$Team[rank_data$Team == "SF"] <- "SFG"
rank_data$Team[rank_data$Team == "SD"] <- "SDP"
rank_data$Team[rank_data$Team == "KC"] <- "KCR"
rank_data$Team[rank_data$Team == "CWS"] <- "CHW"
rank_data$Team[rank_data$Team == "TB"] <- "TBR"
rank_data$Team[rank_data$Team == "NY"] <- "NYY" # Example for New York Yankees, if needed
rank_data$Team[rank_data$Team == "CHI"] <- "CHC" # Example for Chicago Cubs, if needed
rank_data$Team[rank_data$Team == "FLA"] <- "MIA"
rank_data$Team[rank_data$Team == "WSH"] <- "WAS"
standard_teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CIN", "CLE", "COL", "CWS", "DET", "HOU", "KC", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SD", "SEA", "SF", "STL", "TB", "TEX", "TOR", "WAS")
# Extract unique team names from rank_data
unique_teams <- unique(rank_data$Team)
# Identify which of these are not in the standard list
unique_teams[!unique_teams %in% standard_teams]
colnames(merged_data)[colnames(merged_data) == "Name"] <- "Player"
colnames(merged_data)[colnames(merged_data) == "Season"] <- "Year"
colnames(merged_data)[colnames(merged_data) == "Team"] <- "Team"
check_match <- left_join(rank_data, merged_data, by = c("Player", "Team", "Year"))
unmatched_rows <- check_match[is.na(check_match$Age), ]
print(unmatched_rows)
# fixes:
rank_data$Team[rank_data$Team == "WSH"] <- "WSN"
rank_data$Team[rank_data$Team == "WAS"] <- "WSN"
rank_data$Player <- gsub("carlos ivan beltran", "carlos beltran", rank_data$Player)
rank_data$Player <- gsub("adam a lind", "adam lind", rank_data$Player)
rank_data$Player <- gsub("carl demonte crawford", "carl crawford", rank_data$Player)
rank_data$Player <- gsub("hong chih kuo", "hung chih kuo", rank_data$Player)
rank_data$Player <- gsub("mike anthony napoli", "mike napoli", rank_data$Player)
rank_data$Player <- gsub("michael morse", "mike morse", rank_data$Player)
rank_data$Player <- gsub("henderson alvarez", "henderson alvarez iii", rank_data$Player)
rank_data[rank_data$Player == "johnny damon" & rank_data$Year == 2009, "Team"] <- "NYY"
# Change team to 'STL' for Joel Pineiro in 2009
rank_data[rank_data$Player == "joel pineiro" & rank_data$Year == 2009, "Team"] <- "STL"
# Change team to 'LAD' for Randy Wolf in 2009
rank_data[rank_data$Player == "randy wolf" & rank_data$Year == 2009, "Team"] <- "LAD"
# Change team to 'HOU' for Miguel Tejada in 2009
rank_data[rank_data$Player == "miguel tejada" & rank_data$Year == 2009, "Team"] <- "HOU"
# Change team to 'TOR' for Marco Scutaro in 2009
rank_data[rank_data$Player == "marco scutaro" & rank_data$Year == 2009, "Team"] <- "TOR"
# Change team to 'DET' for Edwin Jackson in 2009
rank_data[rank_data$Player == "edwin jackson" & rank_data$Year == 2009, "Team"] <- "DET"
# Change team to 'DET' for Curtis Granderson in 2009
rank_data[rank_data$Player == "curtis granderson" & rank_data$Year == 2009, "Team"] <- "DET"
# Change team to 'DET' for Fernando Rodney in 2009
rank_data[rank_data$Player == "fernando rodney" & rank_data$Year == 2009, "Team"] <- "DET"
check_match <- left_join(rank_data, merged_data, by = c("Player", "Team", "Year"))
unmatched_rows <- check_match[is.na(check_match$Age), ]
print(unmatched_rows)
merged_data <- merge(merged_data, rank_data[, c("Player", "Team", "Year", "Rank")],
by = c("Player", "Team", "Year"), all.x = TRUE)
# Renaming the 'Rank' column to 'top_100' and replacing NA with "No"
merged_data$top_100 <- ifelse(is.na(merged_data$Rank), "No", merged_data$Rank)
# Drop the original 'Rank' column if no longer needed
merged_data$Rank <- NULL
# Print the updated merged_data to check
print(head(merged_data))
# Print the total number of rows in merged_data
total_rows <- nrow(merged_data)
print(paste("Total number of rows in merged_data:", total_rows))
rank_1_to_100 <- sum(as.numeric(as.character(merged_data$top_100)) >= 1 &
as.numeric(as.character(merged_data$top_100)) <= 100, na.rm = TRUE)
print(paste("Number of rows with rank between 1 and 100:", rank_1_to_100))
# Count and print the number of rows with rank 'No'
rank_no <- sum(merged_data$top_100 == "No", na.rm = TRUE)
print(paste("Number of rows with rank 'No':", rank_no))
# Count and print the number of rows with any different rank (if applicable)
# This assumes there might be other unexpected rank values
different_rank <- sum(!merged_data$top_100 %in% c(1:100, "No"), na.rm = TRUE)
print(paste("Number of rows with different or unexpected rank:", different_rank))
