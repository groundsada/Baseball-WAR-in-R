library(glmnet)
data1_x_train <- model.matrix(mpg ~ ., data = data1_train)[,-1]  # Exclude the intercept
data1_y_train <- data1_train$mpg
# Set up a sequence of lambda values for ridge regression
lambdas <- 10^seq(10, -2, length = 100)
# Perform ridge regression with cross-validation
cv_ridge <- cv.glmnet(data1_x_train, data1_y_train, alpha = 0, lambda = lambdas, parallel = TRUE)
# Determine the best lambda value
best_lambda <- cv_ridge$lambda.min
# Plot training MSE as a function of lambda
plot(cv_ridge)
# Predictions on the test set
data1_x_test <- model.matrix(mpg ~ ., data = data1_test)[,-1]  # Exclude the intercept
data1_y_test <- data1_test$mpg
predictions <- predict(cv_ridge, s = best_lambda, newx = data1_x_test)
# Calculate MSE for the test set
mse_test <- mean((predictions - data1_y_test)^2)
# Compare coefficients of ridge regression and linear model
ridge_coeffs <- coef(cv_ridge, s = best_lambda)
lm_coeffs <- coef(lm_model)
data1 <- mtcars
data1$vs <- factor(data1$vs)
data1$am <- factor(data1$am)
head(data1)
summary(data1)
library(caret)
set.seed(20401140)  # For reproducibility
idx1 <- createDataPartition(data1$mpg, p = 0.8, list = FALSE)
data1_train <- data1[idx1,]
data1_test <- data1[-idx1,]
data1_lm <- lm(mpg ~ ., data = data1_train)
summary(data1_lm)
library(glmnet)
data1_x_train <- model.matrix(mpg ~ ., data = data1_train)[,-1]  # Exclude the intercept
data1_y_train <- data1_train$mpg
lambdas <- 10^seq(10, -2, length = 100)
cv_ridge <- cv.glmnet(data1_x_train, data1_y_train, alpha = 0, lambda = lambdas, parallel = TRUE)
best_lambda <- cv_ridge$lambda.min
cat("Best lambda: ", best_lambda)
library(glmnet)
data1_x_train <- model.matrix(mpg ~ ., data = data1_train)[,-1]  # Exclude the intercept
data1_y_train <- data1_train$mpg
lambdas <- 10^seq(10, -2, length = 100)
cv_ridge <- cv.glmnet(data1_x_train, data1_y_train, alpha = 0, lambda = lambdas, parallel = TRUE)
best_lambda <- cv_ridge$lambda.min
cat("\nBest lambda: ", best_lambda)
plot(cv_ridge)
data1_x_test <- model.matrix(mpg ~ ., data = data1_test)[,-1]  # Exclude the intercept
data1_y_test <- data1_test$mpg
predictions <- predict(cv_ridge, s = best_lambda, newx = data1_x_test)
print(predictions)
mse_test <- mean((predictions - data1_y_test)^2)
cat("\nTest MSE: ", mse_test)
ridge_coeffs <- coef(cv_ridge, s = best_lambda)
lm_coeffs <- coef(lm_model)
cat("\nRidge Regression Coefficients:\n")
print(ridge_coeffs)
cat("\nLinear Model Coefficients:\n")
print(lm_coeffs)
mse_test <- mean((predictions - data1_y_test)^2)
cat("\nTest MSE: ", mse_test)
ridge_coeffs <- coef(cv_ridge, s = best_lambda)
lm_coeffs <- coef(lm_model)
cat("\nRidge Regression Coefficients:\n")
print(ridge_coeffs)
cat("\nLinear Model Coefficients:\n")
print(lm_coeffs)
print(4,5)
plot(cars)
install.packages("Rselenium")
install.packages("RSelenium")
install.packages("wdman")
install.packages("netstat")
library(netstat)
library(RSelenium)
library(wdman)
library(netstat)
library(RSelenium)
library(wdman)
library(netstat)
library(RSelenium)
library(wdman)
print("HA")
selenium()
selenium()
library(netstat)
library(RSelenium)
library(wdman)
selenium()
selenium()
selenium_object <- selenium(retcommand = T, check = F)
selenium_object <- selenium(retcommand = T, check = F)
selenium(retcommand = T, check = F)
binman::list_versions("chromedriver")
remote_driver <- rsDriver(browser="chrome", chromever = "114.0.5735.90", verbose = F)
remote_driver <- rsDriver(browser="chrome", chromever = "114.0.5735.90", verbose = F)
remote_driver <- rsDriver(browser="chrome", chromever = "114.0.5735.90", verbose = F, port=free_port())
remote_driver <- rsDriver(browser="chrome", chromever = "114.0.5735.90", verbose = F, port=free_port())
remote_driver <- rsDriver(browser="chrome", chromever = "114.0.5735.90", verbose = F, port=free_port())
binman::list_versions("chromedriver")
remote_driver <- rsDriver(browser="chrome", chromever = "123.0.6312.86", verbose = F, port=free_port())
remote_driver <- rsDriver(browser="chrome", chromever = "123.0.6312.86", verbose = F, port=free_port())
remote_driver$open()
remote_driver <- rsDriver(browser="chrome", chromever = "123.0.6312.86", verbose = F, port=free_port())
remote_driver$open()
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 4567L)
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = freeport())
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = free_port())
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = free_port())
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2
remDr <- remote_driver$client
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2)
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2L)
remDr <- remote_driver$client
# Navigate to the webpage
remDr$navigate("https://www.baseball-reference.com/teams/ARI/2023.shtml")
library(RSelenium)
# Start a Selenium Server and open a browser session
remDr$setTimeout(type = "page load", milliseconds = 2000)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2L)
library(RSelenium)
# Start a Selenium Server and open a browser session
remDr$setTimeout(type = "page load", milliseconds = 2000)
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = free_port())
remDr$close() # Close the browser session
remote_driver$server$stop() # Stop
library(RSelenium)
# Start a Selenium Server and open a browser session
remDr$setTimeout(type = "page load", milliseconds = 2000)
library(RSelenium)
# Start a Selenium Server and open a browser session
remDr$setTimeout(type = "page load", milliseconds = 2000)
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2654L)
remDr <- remote_driver$client
remDr$setTimeout(type = "page load", milliseconds = 2000)
# Navigate to the webpage
remDr$navigate("https://www.baseball-reference.com/teams/ARI/2023.shtml")
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2654L)
remDr$close() # Close the browser session
remote_driver$server$stop() # Stop
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2654L)
remDr <- remote_driver$client
remDr$setTimeout(type = "page load", milliseconds = 20000)
# Navigate to the webpage
remDr$navigate("https://www.baseball-reference.com/teams/ARI/2023.shtml")
remDr$close() # Close the browser session
remote_driver$server$stop() # Stop
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2654L)
remDr <- remote_driver$client
# Navigate to the webpage
remDr$navigate("https://www.baseball-reference.com/teams/ARI/2023.shtml")
# Get the title of the page
titles <- remDr$getTitle()
# Print the title
print(titles[[1]])
# Get the title of the page
titles <- remDr$getTitle()
# Print the title
print(titles[[1]])
# Navigate to the webpage
remDr$navigate("https://www.baseball-reference.com/teams/ARI/2023.shtml")
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2654L)
# Navigate to the webpage
# Find the third table on the page
table_element <- remDr$findElements(using = "css selector", "table")[3]
library(RSelenium)
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2154L)
remDr <- remote_driver$client
# Navigate to the webpage
remDr$navigate("https://www.baseball-reference.com/teams/ARI/2023.shtml")
# Navigate to the webpage
# Find the third table on the page
table_element <- remDr$findElements(using = "css selector", "table")[3]
# Get the HTML of the table
table_html <- table_element$getElementAttribute("outerHTML")[[1]]
# Navigate to the webpage
# Find the third table on the page
table_element <- remDr$findElements(using = "css selector", "table")[3]
# Get the HTML of the table
table_html <- table_element$getElementAttribute("outerHTML")[[1]]
tables <- remDr$findElements(using = "css selector", "table")
# Get the third table element
third_table_element <- tables[[3]]
# Get the HTML of the third table
table_html <- third_table_element$getElementAttribute("outerHTML")[[1]]
# Convert the HTML to a data frame using rvest
library(rvest)
table_df <- read_html(table_html) %>% html_table() %>% .[[1]]
# Print the table
print(table_df)
library(RSelenium)
library(rvest)
library(dplyr)
# Define the teams and years
teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CHW", "CIN", "CLE", "COL", "DET", "HOU", "KCR", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SDP", "SEA", "SFG", "STL", "TBR", "TEX", "TOR", "WSN")
years <- 2003:2023
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2154L)
library(RSelenium)
library(rvest)
library(dplyr)
# Define the teams and years
teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CHW", "CIN", "CLE", "COL", "DET", "HOU", "KCR", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SDP", "SEA", "SFG", "STL", "TBR", "TEX", "TOR", "WSN")
years <- 2003:2023
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2954L)
remDr <- remote_driver$client
# Initialize an empty list to store data frames
all_tables <- list()
# Loop through each team and year
for (team in teams) {
for (year in years) {
# Navigate to the webpage
url <- paste0("https://www.baseball-reference.com/teams/", team, "/", year, ".shtml")
remDr$navigate(url)
# Get all table elements
tables <- remDr$findElements(using = "css selector", "table")
# Check if there are at least three tables
if (length(tables) >= 3) {
# Get the third table element
third_table_element <- tables[[3]]
# Get the HTML of the third table
table_html <- third_table_element$getElementAttribute("outerHTML")[[1]]
# Convert the HTML to a data frame
table_df <- read_html(table_html) %>% html_table() %>% .[[1]]
# Add team and year columns
table_df <- table_df %>% mutate(Team = team, Year = year)
# Append the data frame to the list
all_tables <- append(all_tables, list(table_df))
}
}
}
library(RSelenium)
library(rvest)
library(dplyr)
# Define the teams and years
teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CHW", "CIN", "CLE", "COL", "DET", "HOU", "KCR", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SDP", "SEA", "SFG", "STL", "TBR", "TEX", "TOR", "WSN")
years <- 2003:2023
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 2954L)
library(RSelenium)
library(rvest)
library(dplyr)
# Define the teams and years
teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CHW", "CIN", "CLE", "COL", "DET", "HOU", "KCR", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SDP", "SEA", "SFG", "STL", "TBR", "TEX", "TOR", "WSN")
years <- 2003:2023
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 3154L)
remDr <- remote_driver$client
# Initialize an empty list to store data frames
all_tables <- list()
# Loop through each team and year
for (team in teams) {
for (year in years) {
# Navigate to the webpage
url <- paste0("https://www.baseball-reference.com/teams/", team, "/", year, ".shtml")
remDr$navigate(url)
# Get all table elements
tables <- remDr$findElements(using = "css selector", "table")
# Check if there are at least three tables
if (length(tables) >= 3) {
# Get the third table element
third_table_element <- tables[[3]]
# Get the HTML of the third table
table_html <- third_table_element$getElementAttribute("outerHTML")[[1]]
clean_names <- function(df) {
names(df) <- make.names(names(df), unique = TRUE)
return(df)
}
# In the loop, after converting HTML to a data frame:
table_df <- read_html(table_html) %>% html_table() %>% .[[1]] %>% clean_names()
# Now you can use mutate without error
table_df <- table_df %>% mutate(Team = team, Year = year)
# Append the data frame to the list
all_tables <- append(all_tables, list(table_df))
}
}
}
library(RSelenium)
library(rvest)
library(dplyr)
# Define the teams and years
teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CHW", "CIN", "CLE", "COL", "DET", "HOU", "KCR", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SDP", "SEA", "SFG", "STL", "TBR", "TEX", "TOR", "WSN")
years <- 2003:2023
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 4654L)
remDr <- remote_driver$client
# Create directories for the data
dir.create("data1", showWarnings = FALSE)
dir.create("data2", showWarnings = FALSE)
library(RSelenium)
library(rvest)
library(dplyr)
# Define the teams and years
teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CHW", "CIN", "CLE", "COL", "DET", "HOU", "KCR", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SDP", "SEA", "SFG", "STL", "TBR", "TEX", "TOR", "WSN")
years <- 2003:2023
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 4654L)
# Loop through each team and year
remDr$setTimeout(type = "page load", milliseconds = 70000)
# Create directories for the data
dir.create("data1", showWarnings = FALSE)
dir.create("data2", showWarnings = FALSE)
# Function to download data for a team and year
download_data <- function(team, year) {
# Define file paths
file_path1 <- paste0("data1/", team, "_", year, "_table1.csv")
file_path3 <- paste0("data2/", team, "_", year, "_table3.csv")
# Check if files already exist
if (!file.exists(file_path1) || !file.exists(file_path3)) {
print("trying...")
# Navigate to the webpage
url <- paste0("https://www.baseball-reference.com/teams/", team, "/", year, ".shtml")
remDr$navigate(url)
print("loaded webpage...")
# Get all table elements
tables <- remDr$findElements(using = "css selector", "table")
print("getting tables...")
# Check if there are at least three tables
if (length(tables) >= 3) {
# Get the first and third table elements
first_table_element <- tables[[1]]
third_table_element <- tables[[3]]
# Get the HTML of the tables
first_table_html <- first_table_element$getElementAttribute("outerHTML")[[1]]
third_table_html <- third_table_element$getElementAttribute("outerHTML")[[1]]
# Convert the HTML to data frames
first_table_df <- read_html(first_table_html) %>% html_table() %>% .[[1]] %>% clean_names()
third_table_df <- read_html(third_table_html) %>% html_table() %>% .[[1]] %>% clean_names()
# Write the data frames to CSV files
write.csv(first_table_df, file = file_path1, row.names = FALSE)
write.csv(third_table_df, file = file_path3, row.names = FALSE)
}
}
}
# Loop through each team and year
for (team in teams) {
for (year in years) {
while (TRUE) {
tryCatch({
download_data(team, year)
break  # Exit the loop if successful
}, error = function(e) {
cat("Error for", team, year, "- retrying...\n")
Sys.sleep(5)  # Wait 5 seconds before retrying
})
}
}
}
library(RSelenium)
library(rvest)
library(dplyr)
# Define the teams and years
teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CHW", "CIN", "CLE", "COL", "DET", "HOU", "KCR", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SDP", "SEA", "SFG", "STL", "TBR", "TEX", "TOR", "WSN")
years <- 2003:2023
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 4654L)
library(RSelenium)
library(rvest)
library(dplyr)
# Define the teams and years
teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CHW", "CIN", "CLE", "COL", "DET", "HOU", "KCR", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SDP", "SEA", "SFG", "STL", "TBR", "TEX", "TOR", "WSN")
years <- 2003:2023
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 4754L)
remDr <- remote_driver$client
# Create directories for the data
dir.create("data1", showWarnings = FALSE)
dir.create("data2", showWarnings = FALSE)
# Loop through each team and year
remDr$setTimeout(type = "page load", milliseconds = 170000)
# Create directories for the data
dir.create("data1", showWarnings = FALSE)
dir.create("data2", showWarnings = FALSE)
# Function to download data for a team and year
download_data <- function(team, year) {
# Define file paths
file_path1 <- paste0("data1/", team, "_", year, "_table1.csv")
file_path3 <- paste0("data2/", team, "_", year, "_table3.csv")
# Check if files already exist
if (!file.exists(file_path1) || !file.exists(file_path3)) {
print("trying...")
# Navigate to the webpage
url <- paste0("https://www.baseball-reference.com/teams/", team, "/", year, ".shtml")
remDr$navigate(url)
print("loaded webpage...")
# Get all table elements
tables <- remDr$findElements(using = "css selector", "table")
print("getting tables...")
# Check if there are at least three tables
if (length(tables) >= 3) {
# Get the first and third table elements
first_table_element <- tables[[1]]
third_table_element <- tables[[3]]
# Get the HTML of the tables
first_table_html <- first_table_element$getElementAttribute("outerHTML")[[1]]
third_table_html <- third_table_element$getElementAttribute("outerHTML")[[1]]
# Convert the HTML to data frames
first_table_df <- read_html(first_table_html) %>% html_table() %>% .[[1]] %>% clean_names()
third_table_df <- read_html(third_table_html) %>% html_table() %>% .[[1]] %>% clean_names()
# Write the data frames to CSV files
write.csv(first_table_df, file = file_path1, row.names = FALSE)
write.csv(third_table_df, file = file_path3, row.names = FALSE)
}
}
}
# Loop through each team and year
for (team in teams) {
for (year in years) {
while (TRUE) {
tryCatch({
download_data(team, year)
break  # Exit the loop if successful
}, error = function(e) {
cat("Error for", team, year, "- retrying...\n")
Sys.sleep(5)  # Wait 5 seconds before retrying
})
}
}
}
library(RSelenium)
library(rvest)
library(dplyr)
# Define the teams and years
teams <- c("ARI", "ATL", "BAL", "BOS", "CHC", "CHW", "CIN", "CLE", "COL", "DET", "HOU", "KCR", "LAA", "LAD", "MIA", "MIL", "MIN", "NYM", "NYY", "OAK", "PHI", "PIT", "SDP", "SEA", "SFG", "STL", "TBR", "TEX", "TOR", "WSN")
years <- 2003:2023
# Start a Selenium Server and open a browser session
remote_driver <- rsDriver(browser = "chrome", chromever = "123.0.6312.86", verbose = FALSE, port = 4154L)
remDr <- remote_driver$client
# Create directories for the data
dir.create("data1", showWarnings = FALSE)
dir.create("data2", showWarnings = FALSE)
# Loop through each team and year
remDr$setTimeout(type = "page load", milliseconds = 170000)
clean_names <- function(df) {
names(df) <- make.names(names(df), unique = TRUE)
return(df)
}
# Create directories for the data
dir.create("data1", showWarnings = FALSE)
dir.create("data2", showWarnings = FALSE)
# Function to download data for a team and year
download_data <- function(team, year) {
# Define file paths
file_path1 <- paste0("data1/", team, "_", year, "_table1.csv")
file_path3 <- paste0("data2/", team, "_", year, "_table3.csv")
# Check if files already exist
if (!file.exists(file_path1) || !file.exists(file_path3)) {
print("trying...")
# Navigate to the webpage
url <- paste0("https://www.baseball-reference.com/teams/", team, "/", year, ".shtml")
remDr$navigate(url)
print("loaded webpage...")
# Get all table elements
tables <- remDr$findElements(using = "css selector", "table")
print("getting tables...")
# Check if there are at least three tables
if (length(tables) >= 3) {
# Get the first and third table elements
first_table_element <- tables[[1]]
third_table_element <- tables[[3]]
# Get the HTML of the tables
first_table_html <- first_table_element$getElementAttribute("outerHTML")[[1]]
third_table_html <- third_table_element$getElementAttribute("outerHTML")[[1]]
# Convert the HTML to data frames
first_table_df <- read_html(first_table_html) %>% html_table() %>% .[[1]] %>% clean_names()
third_table_df <- read_html(third_table_html) %>% html_table() %>% .[[1]] %>% clean_names()
# Write the data frames to CSV files
write.csv(first_table_df, file = file_path1, row.names = FALSE)
write.csv(third_table_df, file = file_path3, row.names = FALSE)
}
}
}
# Loop through each team and year
for (team in teams) {
for (year in years) {
while (TRUE) {
tryCatch({
download_data(team, year)
break  # Exit the loop if successful
}, error = function(e) {
cat("Error for", team, year, ":", e$message, "- retrying...\n")
Sys.sleep(5)  # Wait 5 seconds before retrying
})
}
}
}
