# Find indices of high correlations
high_corr_indices <- which(abs(correlations) >= 0.85, arr.ind = TRUE)
# Create a data frame from these indices
high_corr_pairs <- data.frame(
row = rownames(correlations)[high_corr_indices[, 1]],
col = colnames(correlations)[high_corr_indices[, 2]],
cor_value = correlations[high_corr_indices]
)
# Filter to keep only one instance of each pair (i.e., upper triangle, excluding the diagonal where row == col)
high_corr_pairs <- high_corr_pairs %>%
filter(row != col, as.numeric(row) < as.numeric(col))
# Identify columns to drop (choosing one from each pair, e.g., the first one listed)
columns_to_drop <- unique(high_corr_pairs$row)
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find indices of high correlations
high_corr_indices <- which(abs(correlations) >= 0.85, arr.ind = TRUE)
# Create a data frame from these indices
high_corr_pairs <- data.frame(
row = rownames(correlations)[high_corr_indices[, 1]],
col = colnames(correlations)[high_corr_indices[, 2]],
cor_value = correlations[high_corr_indices]
)
# Filter to keep only one instance of each pair (i.e., upper triangle, excluding the diagonal where row == col)
high_corr_pairs <- high_corr_pairs %>%
filter(row != col, as.numeric(row) < as.numeric(col))
# Identify columns to drop (choosing one from each pair, e.g., the first one listed)
columns_to_drop <- unique(high_corr_pairs$row)
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.85, arr.ind = TRUE)
# Create a data frame of high correlation pairs
high_corr_pairs <- data.frame(row = rownames(high_corr)[high_corr[,1]],
col = colnames(high_corr)[high_corr[,2]],
cor = correlations[high_corr])
high_corr_pairs
# Filter out lower triangle and diagonal of the correlation matrix to avoid duplicates and self-correlation
high_corr_pairs <- high_corr_pairs %>%
filter(row < col)
high_corr_pairs
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.85, arr.ind = TRUE)
# Create a data frame of high correlation pairs
high_corr_pairs <- data.frame(row = rownames(high_corr)[high_corr[,1]],
col = colnames(high_corr)[high_corr[,2]],
cor = correlations[high_corr])
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.85, arr.ind = TRUE)
# Create a data frame of high correlation pairs
high_corr_pairs <- data.frame(row = rownames(high_corr)[high_corr[,1]],
col = colnames(high_corr)[high_corr[,2]],
cor = correlations[high_corr])
high_corr_pairs
# Filter out lower triangle and diagonal of the correlation matrix to avoid duplicates and self-correlation
high_corr_pairs <- high_corr_pairs %>%
filter(row != col, as.numeric(row) < as.numeric(col))
high_corr_pairs
# Filter out lower triangle and diagonal of the correlation matrix to avoid duplicates and self-correlation
high_corr_pairs <- high_corr_pairs %>%
filter(match(row, rownames(correlations)) < match(col, colnames(correlations)))
high_corr_pairs
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.85, arr.ind = TRUE)
# Create a data frame of high correlation pairs
high_corr_pairs <- data.frame(row = rownames(high_corr)[high_corr[,1]],
col = colnames(high_corr)[high_corr[,2]],
cor = correlations[high_corr])
high_corr_pairs
# Filter out lower triangle and diagonal of the correlation matrix to avoid duplicates and self-correlation
high_corr_pairs <- high_corr_pairs %>%
filter(match(row, rownames(correlations)) < match(col, colnames(correlations)))
high_corr_pairs
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.85, arr.ind = TRUE)
# Identify columns to drop
columns_to_drop <- unique(colnames(correlations)[high_corr[,2]])
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.95, arr.ind = TRUE)
# Identify columns to drop
columns_to_drop <- unique(colnames(correlations)[high_corr[,2]])
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.15, arr.ind = TRUE)
# Identify columns to drop
columns_to_drop <- unique(colnames(correlations)[high_corr[,2]])
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.95, arr.ind = TRUE)
# Identify columns to drop
columns_to_drop <- unique(colnames(correlations)[high_corr[,2]])
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.85, arr.ind = TRUE)
# Identify columns to drop
columns_to_drop <- unique(colnames(correlations)[high_corr[,2]])
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.95, arr.ind = TRUE)
# Identify columns to drop
columns_to_drop <- unique(colnames(correlations)[high_corr[,2]])
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.15, arr.ind = TRUE)
# Identify columns to drop
columns_to_drop <- unique(colnames(correlations)[high_corr[,2]])
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.15, arr.ind = TRUE)
high_corr
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.15, arr.ind = TRUE)
high_corr
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
high_corr
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
high_corr
abs(correlations) >= 0.99
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
#high_corr
abs(correlations) >= 0.99
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
#high_corr
which(abs(correlations) >= 0.99
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
#high_corr
which(abs(correlations) >= 0.99)
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
#high_corr
which(abs(correlations) >= 0.99, arr.ind = TRUE)
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
#high_corr
which(abs(correlations) >= 0.95, arr.ind = TRUE)
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
#high_corr
which(abs(correlations) >= 0.8, arr.ind = TRUE)
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
#high_corr
nrow(which(abs(correlations) >= 0.8, arr.ind = TRUE))
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
#high_corr
nrow(which(abs(correlations) >= 0.95, arr.ind = TRUE))
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
high_corr
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
# Identify columns to drop
columns_to_drop <- unique(colnames(correlations)[high_corr[,2]])
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Identify columns to drop
columns_to_drop <- unique(colnames(correlations)[high_corr[,2]])
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.99, arr.ind = TRUE)
# Identify columns to drop
columns_to_drop <- unique(colnames(correlations)[high_corr[,2]])
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
# Load necessary library
library(dplyr)
# Compute the correlation matrix for numeric columns
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")
# Find pairs with correlation >= 0.85
high_corr <- which(abs(correlations) >= 0.81, arr.ind = TRUE)
# Identify columns to drop
columns_to_drop <- unique(colnames(correlations)[high_corr[,2]])
# Create the trimmed dataframe by dropping these columns
trimmed <- data %>% select(-all_of(columns_to_drop))
# Compare the number of columns between the original and trimmed dataframes
original_cols <- ncol(data)
trimmed_cols <- ncol(trimmed)
# Print the number of columns in each
cat("Original dataframe columns: ", original_cols, "\n")
cat("Trimmed dataframe columns: ", trimmed_cols, "\n")
library(dplyr)
data <- read.csv("dataset/master_rank.csv", fileEncoding = "UTF-8")
head(data)
colnames(data)
# Assigning new names to the columns of the dataframe 'data'
colnames(data) <- c("Player", "Team", "Year", "Player Rank", "Position", "Age (from source x)",
"Games Played (from source x)", "Plate Appearances", "At Bats", "Runs Scored",
"Hits", "Doubles (from source x)", "Triples (from source x)", "Home Runs",
"Runs Batted In", "Stolen Bases", "Caught Stealing", "Bases on Balls", "Strikeouts",
"Batting Average", "On-Base Percentage", "Slugging Percentage", "On-base Plus Slugging",
"Adjusted OPS", "Total Bases", "Grounded into Double Play", "Hit by Pitch",
"Sacrifice Hits", "Sacrifice Flies", "Intentional Walks", "Source File (from source x)",
"Age (from source y)", "Country", "Batting Side", "Throwing Hand", "Height",
"Weight", "Date of Birth", "Years Playing", "Games Played (from source y)",
"Games Started", "Batting Stats", "Defensive Stats", "Games as Pitcher",
"Games as Catcher", "Games as First Baseman", "Games as Second Baseman",
"Games as Third Baseman", "Games as Shortstop", "Games as Left Fielder",
"Games as Center Fielder", "Games as Right Fielder", "Games as Outfielder",
"Designated Hitter", "Pinch Hitter", "Pinch Runner", "Wins Above Replacement",
"Salary", "Unclear Column X.1", "Source File (from source y)", "Top 100 Status")
# Optionally, print the updated column names to confirm
print(colnames(data))
# Load necessary library
library(dplyr)
# Define pairs of columns to compare
column_pairs <- list(
c("Age (from source x)", "Age (from source y)"),
c("G.x", "G.y"),
c("X2B.x", "X2B.y"),
c("X3B.x", "X3B.y")
)
# Function to compare and potentially drop one column
process_columns <- function(data, pair) {
col1 <- pair[1]
col2 <- pair[2]
# Check if all values are the same in these columns
if (all(data[[col1]] == data[[col2]], na.rm = TRUE)) {
# If same, drop the second column and rename the first one
new_name <- gsub(".x$", "", col1)  # Remove .x from the name
data[[new_name]] <- data[[col1]]  # Create new column with the appropriate name
data[[col1]] <- NULL  # Remove the original column
data[[col2]] <- NULL  # Remove the second column
cat(sprintf("Columns %s and %s are the same. Removed %s and renamed %s to %s.\n", col1, col2, col2, col1, new_name))
} else {
cat(sprintf("Columns %s and %s differ. No columns removed.\n", col1, col2))
}
return(data)
}
# Apply the function to each pair of columns
for (pair in column_pairs) {
data <- process_columns(data, pair)
}
# Print out the updated column names to confirm changes
print(colnames(data))
# Function to compare and potentially rename columns
process_columns <- function(data, col1, new_name1, col2, new_name2) {
# Rename the first column directly
data[[new_name1]] <- data[[col1]]
data[[col1]] <- NULL  # Remove the original column
# Rename the second column directly
data[[new_name2]] <- data[[col2]]
data[[col2]] <- NULL  # Remove the second column
cat(sprintf("Renamed %s to %s and %s to %s.\n", col1, new_name1, col2, new_name2))
return(data)
}
# Define column names and new names
col1 <- "Games Played (from source x)"
new_name1 <- "Games Played or Pitched"
col2 <- "Games Played (from source y)"
new_name2 <- "Games Played"
# Apply the function to rename "Games Played"
data <- process_columns(data, col1, new_name1, col2, new_name2)
# Since "Doubles (from source x)" and "Triples (from source x)" do not have a corresponding '.y' pair,
# we simply rename these columns to remove the source indication if no other source is to be compared.
data <- rename(data, Doubles = `Doubles (from source x)`, Triples = `Triples (from source x)`)
# Remove any source file columns if they still exist
data$`Source File (from source x)` <- NULL
data$`Source File (from source y)` <- NULL
data$`Unclear Column X.1` <- NULL
# Print out the updated column names to confirm changes
print(colnames(data))
# Load necessary libraries
library(tidyverse)  # For data manipulation and visualization
library(caret)      # For machine learning
library(corrplot)   # For visualizing correlations
library(ggplot2)    # For creating plots
library(randomForest)  # For random forest modeling
# Checking for missing values
sum(is.na(data))
# Visualizing missing values
library(VIM)
aggr_plot <- aggr(data, col=c('navyblue','yellow'), numbers=TRUE, sortVars=TRUE,
labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
# Removing missing values or replacing them
data <- na.omit(data)  # Remove rows with missing values
# data <- data %>% mutate(across(everything(), ~replace(., is.na(.), median(., na.rm = TRUE))))  # Replace NA with median
# Convert categorical data to factors
data$Player <- as.factor(data$Player)
data$Team <- as.factor(data$Team)
data$Position <- as.factor(data$Position)
data$Country <- as.factor(data$Country)
data$`Batting Side` <- as.factor(data$`Batting Side`)
data$`Throwing Hand` <- as.factor(data$`Throwing Hand`)
data$`Top 100 Status` <- as.factor(data$`Top 100 Status`)
# Plotting distributions of numeric data
data %>%
select_if(is.numeric) %>%
gather(key="variables", value="value") %>%
ggplot(aes(x=value)) +
facet_wrap(~variables, scales='free') +
geom_histogram(bins=30, fill="tomato", color="black")
# Box plots for Positions and Salaries
data %>%
ggplot(aes(x=Position, y=Salary)) +
geom_boxplot(fill="lightblue", color="black")
# Compute correlations among numeric variables
correlations <- cor(data %>% select_if(is.numeric), use = "pairwise.complete.obs")  # handle missing values appropriately
# Heatmap of correlations
library(ggplot2)
library(reshape2)
# Melt the correlation matrix
melted_corr <- melt(correlations)
# Create the heatmap
ggplot(data = melted_corr, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0, limit = c(-1,1), space = "Lab", name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.title = element_blank())
# Plotting correlations using corrplot
corrplot(correlations, method="circle")
